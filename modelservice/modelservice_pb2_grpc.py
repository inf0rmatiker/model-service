# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from modelservice import modelservice_pb2 as modelservice__pb2


class MasterStub(object):
    """--------- Service Definitions ----------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuildModels = channel.unary_unary(
                '/Master/BuildModels',
                request_serializer=modelservice__pb2.BuildModelsRequest.SerializeToString,
                response_deserializer=modelservice__pb2.BuildModelsResponse.FromString,
                )
        self.GetModel = channel.unary_unary(
                '/Master/GetModel',
                request_serializer=modelservice__pb2.GetModelRequest.SerializeToString,
                response_deserializer=modelservice__pb2.GetModelResponse.FromString,
                )
        self.RegisterWorker = channel.unary_unary(
                '/Master/RegisterWorker',
                request_serializer=modelservice__pb2.WorkerRegistrationRequest.SerializeToString,
                response_deserializer=modelservice__pb2.WorkerRegistrationResponse.FromString,
                )
        self.DeregisterWorker = channel.unary_unary(
                '/Master/DeregisterWorker',
                request_serializer=modelservice__pb2.WorkerRegistrationRequest.SerializeToString,
                response_deserializer=modelservice__pb2.WorkerRegistrationResponse.FromString,
                )


class MasterServicer(object):
    """--------- Service Definitions ----------

    """

    def BuildModels(self, request, context):
        """Creates individual BuildModels requests for workers, tracking the job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModel(self, request, context):
        """Queries the built models by spatial extent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Registers a Worker to track
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeregisterWorker(self, request, context):
        """De-registers a Worker from tracking
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuildModels': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildModels,
                    request_deserializer=modelservice__pb2.BuildModelsRequest.FromString,
                    response_serializer=modelservice__pb2.BuildModelsResponse.SerializeToString,
            ),
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=modelservice__pb2.GetModelRequest.FromString,
                    response_serializer=modelservice__pb2.GetModelResponse.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=modelservice__pb2.WorkerRegistrationRequest.FromString,
                    response_serializer=modelservice__pb2.WorkerRegistrationResponse.SerializeToString,
            ),
            'DeregisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.DeregisterWorker,
                    request_deserializer=modelservice__pb2.WorkerRegistrationRequest.FromString,
                    response_serializer=modelservice__pb2.WorkerRegistrationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """--------- Service Definitions ----------

    """

    @staticmethod
    def BuildModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/BuildModels',
            modelservice__pb2.BuildModelsRequest.SerializeToString,
            modelservice__pb2.BuildModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/GetModel',
            modelservice__pb2.GetModelRequest.SerializeToString,
            modelservice__pb2.GetModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/RegisterWorker',
            modelservice__pb2.WorkerRegistrationRequest.SerializeToString,
            modelservice__pb2.WorkerRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeregisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/DeregisterWorker',
            modelservice__pb2.WorkerRegistrationRequest.SerializeToString,
            modelservice__pb2.WorkerRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuildModels = channel.unary_unary(
                '/Worker/BuildModels',
                request_serializer=modelservice__pb2.BuildModelsRequest.SerializeToString,
                response_deserializer=modelservice__pb2.BuildModelsResponse.FromString,
                )
        self.GetModel = channel.unary_unary(
                '/Worker/GetModel',
                request_serializer=modelservice__pb2.GetModelRequest.SerializeToString,
                response_deserializer=modelservice__pb2.GetModelResponse.FromString,
                )


class WorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BuildModels(self, request, context):
        """Builds models at the worker level by training/testing on queried data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModel(self, request, context):
        """Queries the local built models at the worker level
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuildModels': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildModels,
                    request_deserializer=modelservice__pb2.BuildModelsRequest.FromString,
                    response_serializer=modelservice__pb2.BuildModelsResponse.SerializeToString,
            ),
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=modelservice__pb2.GetModelRequest.FromString,
                    response_serializer=modelservice__pb2.GetModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Worker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Worker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BuildModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Worker/BuildModels',
            modelservice__pb2.BuildModelsRequest.SerializeToString,
            modelservice__pb2.BuildModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Worker/GetModel',
            modelservice__pb2.GetModelRequest.SerializeToString,
            modelservice__pb2.GetModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
